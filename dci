#!/bin/sh

usage="Usage: $(basename $0) [FILES]: assists efficiently and conveniently the commit of specified file(s)."

#pager="$(which more 2>/dev/null)"

# Preferred, more complete:
pager="$(which less 2>/dev/null)"


# Otherwise mostly blank screen to dismiss:

# This is a 'more'-specific option, yet unsupported on older versions of it:
#pager_opt="--exit-on-eof"

# Counterpart option for 'less':
pager_opt="--quit-at-eof"


#pager_opt=""


# Select relevant version control client:
vcs_tool="svn"

if [ -d "CVS" ]; then
	vcs_tool="cvs"
fi


target=$*
arrow="---------------------> "

echo "$arrow Showing diff for <${target}>:"

# CVS diff returns 1 whereas ok:
if [ ${vcs_tool} = "cvs" ]; then

	${vcs_tool} diff "${target}"
	echo "${arrow} Committing-in <${target}>:"
	${vcs_tool} ci "${target}"

	echo "...done"

elif [ -d ".svn" ]; then

	if ${vcs_tool} diff "${target}" | more; then

		echo "${arrow} Committing-in <${target}>:"
		${vcs_tool} ci "${target}"

		echo "...done"

	fi

else

	if [ -z "${target}" ]; then

		# If no argument has been specified, default to incremental commits for
		# all:
		#
		dci-all

	else

		# Supposing Git here.

		# In case was not added yet, to see the diffs at next stage:
		git add "${target}"

		# We want to see what we are about to commit; it depends on whether we
		# can have a separate frame or not (on the console):
		#
		# (possibly not even defined)
		if [ "${HULL_NO_GRAPHICAL_OUTPUT}" = "0" ]; then

			# Rarest case here:

			echo "${arrow} Committing-in <${target}>:"

			# Typically being on a console here:
			git diff --staged "${target}" | ${pager} ${pager_opt}

			# Pause needed to read previous diff:
			# Not needed as diff pauses: read do_not_care

			git commit "${target}"

		else

			# Multi-frame/window here (the general case).
			#
			# (HULL_NO_GRAPHICAL_OUTPUT either defined to 1 or not defined)

			# (not wanting the pager to truncate longer lines)

			# Appearing first, so that the commit can be commented in the
			# spawned editor while paging the diffs thanks to the next command:
			# (only drawback: not able anymore to detect aborted commits)
			#
			echo "${arrow} Committing-in <${target}>:"

			# Committing in parallel to diff'ing was a bad idea:
			#git commit "${target}" &

			# For example version 1.7.2.5 does not support minimal:
			#GIT_PAGER='' git diff --staged "${target}" | ${pager} ${pager_opt}

			#GIT_PAGER='' git diff --staged --minimal --color=always "${target}" | ${pager} ${pager_opt}

			# If scrolling back anyway at the next commit operation, no paging
			# is of use:
			#
			GIT_PAGER='' git diff --staged --minimal --color=always "${target}"

			#git diff --staged --minimal "${target}"

			git commit "${target}"

		fi

		if [ ! $? -eq 0 ]; then

			echo "Commit aborted for ${target}, unstaging it." 1>&2
			git reset HEAD "${target}"

		fi

	fi

fi
