#!/bin/sh


USAGE="
 Usage: wh [-h|--help] [--verbose] [-q|--quiet] [--no-path] [--exclude-path <a directory>] <filePattern> [<startingDirectory>]
 Searches all files and directories matching <filePattern>, from <starting_directory> if specified, otherwise from current directory.
   Options:
	 [-q|--quiet]: only returns file entries (no extra display); suitable for scripts (ex: for f in \$(wh -q 'foo*'); do...)
	 --no-path: returns the filenames without any leading path
	 --exclude-path DIR: excludes specified directory DIR from search"


find_gnu="/usr/bin/find"

verbose=1
quiet=1
no_path=1

exclude_command=""

token_eaten=0

while [ $token_eaten -eq 0 ] ; do

	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then

		echo "$USAGE"
		exit 0

	elif [ "$1" = "--verbose" ]; then

		verbose=0
		echo "Verbose mode activated."
		shift

	elif [ "$1" = "-q" ] || [ "$1" = "--quiet" ]; then

		quiet=0
		#echo "Quiet mode activated."
		shift

	elif [ "$1" = "--no-path" ]; then

		no_path=0
		[ $quiet -eq 0 ] || echo "Only filenames without paths will be output."
		shift

	elif [ "$1" = "--exclude-path" ]; then

		to_exclude="$2"
		exclude_command="${exclude_command} ( -name $to_exclude -prune -o -type f ) -a "
		[ $quiet -eq 0 ] || echo "Directory $to_exclude will be excluded."
		#echo "exclude_command = $exclude_command"

		shift
		shift

	else
		token_eaten=1
	fi

done

# Here in $1 $2 etc. are the unrecognized commands.

#echo "Remaining parameters: $*"


if [ $# -eq 0 ]; then

	echo " Error, at least one parameter must be specified.$USAGE
	" 1>&2
	exit 10

elif [ $# -eq 1 ]; then

	starting_dir=$(pwd)

elif [ $# -eq 2 ]; then

	starting_dir=$2

else
	echo " Error, too many parameters specified: $*.$USAGE
	" 1>&2
	exit 15
fi


if [ ! -d "$starting_dir" ]; then
	echo " Error, no such directory: '$starting_dir'.$USAGE
	" 1>&2
	exit 20
else
	cd "$starting_dir"
fi



if [ -x "$find_gnu" ]; then
	find="$find_gnu"
else
	find=$(which find 2>/dev/null | grep -v ridiculously)
fi

[ $verbose -eq 1 ] || echo "find is $find"



targetPattern=$1

[ $quiet -eq 0 ] || echo "
Looking for all files and directories matching <$targetPattern>, starting from directory <$starting_dir>
"

[ $verbose -eq 1 ] || echo "Current directory is: $(pwd)"


# For an unknown reason, 'cd XXX ; find . YYY' seems to work better than
# 'find XXX YYY'.

if [ $no_path -eq 0 ] ; then

	[ $verbose -eq 1 ] || echo "No path case, run from $(pwd): command is: $find . $exclude_command -name" "$targetPattern" -exec basename '{}' ';' 2>/dev/null

	$find . $exclude_command -name "$targetPattern" -exec basename '{}' ';' 2>/dev/null

else

	[ $verbose -eq 1 ] || echo "With path case, run from $(pwd): command is: $find . $exclude_command -name" "$targetPattern" "-print 2>/dev/null | more"

	$find . $exclude_command -name "$targetPattern" -print 2>/dev/null | more

fi

[ $quiet -eq 0 ] || echo "
End of search"
