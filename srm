#!/bin/sh

usage="  $(basename $0) (for \"secure rm\"): stores deleted files in a trash instead of deleting them directly, in order to give one more chance of retrieving them if necessary. Ensures that no two filenames can collide in trash so that all contents are preserved.

  Usage: $(basename $0) <files to delete securely>

  See also: emptyTrash.sh"


trash_default="${HOME}/tmp/Trash"

if [ -z "${TRASH}" ]; then
	echo "Warning: \${TRASH} no defined, assuming trash is '${trash_default}'."
	TRASH="${trash_default}"
fi


if [ ! -d "${TRASH}" ]; then
	echo "Warning: trash directory, ${TRASH}, does not exist; creating it."
	/bin/mkdir -p "${TRASH}"
fi

echo

# Quoted $@ allows not to split parameters which contain for example spaces; $*
# allows to still have only one string (otherwise: too many arguments for the
# test)
#
if [ -n "$*" ]; then

	echo "Secure deleting (moving to trash ${TRASH}):"
	echo "  $@"

	# This version finally preferred to the next one, which could not support
	# multiple filenames:

	for elem in "$@"; do

		#echo "elem = ${elem}"

		actual_elem=$(basename "${elem}" 2>/dev/null)
		#echo "actual_elem = ${actual_elem}"

		if [ -z "${actual_elem}" ]; then

			echo "(uname to process element '${elem}', aborting)" 1>&2
			exit 17

		fi

		# File/directory or (possibly dead) symbolic link:
		if [ -e "${elem}" ] || [ -h "${elem}" ]; then

			# No need to have specific rights such as reading or writing in
			# order to move it (no chmod needed).

			trash_target="${TRASH}/${actual_elem}"

			if [ -e "${trash_target}" ] || [ -h "${trash_target}" ]; then

				new_elem="${actual_elem}-$(date +'%Y%m%d-%Hh%Mm%Ss')"
				new_full_elem="${TRASH}/${new_elem}"

				# To provide a real unicity (otherwise a 'find' executing a srm
				# could remove in the same second a large number of different
				# files bearing the same name in that tree):
				#

				#echo "Testing trash target ${new_full_elem}"

				while [ -e "${new_full_elem}" ]; do

					new_full_elem="${new_full_elem}x"

				done

				echo "Warning: element '${actual_elem}' was already existing in trash, storing it as '${new_full_elem}' instead." 1>&2

				/bin/mv -f "${elem}" "${new_full_elem}"

			else

				/bin/mv -f "${elem}" ${TRASH}

			fi

		else

			echo "(element '${elem}' not found, hence skipped)" 1>&2

		fi

	done

	# Better management of exotic filenames (ex: with spaces):
	#/bin/mv -f "$*" ${TRASH}

	# Better displayed in all cases:
	echo "Deleting finished"
	#echo

else

	echo "  Error: no argument specified.

${usage}" 1>&2

	exit 5

fi
