#!/bin/sh

usage="$(basename $0): recursive grep for the ones that lack it.

  Usage: $(basename $0) [-v|--verbose] [-q|--quiet] [-f|--filenames-only] [-i|--insensitive] [-r|--restructured] [--exclude ELEM]* <Expression to be found in files> [<Filter on files>]

  Options:
	-v or --verbose: be specifically verbose
	-q or --quiet: be specifically quiet, just listing matches
	-f or --filenames-only: display only filenames, not also the matched patterns, and if there are multiple matches in the same file, displays its filename only once (implies quiet); typically useful in scripts
	-i or --insensitive: perform case-insensitive searches in the content of files, and also when filtering any filenames
	-r or --restructured: use ReStructured text mode (skip tmp-rst directories, search only *.rst and *.rst.template files)
	--exclude ELEM: excludes the specified filesystem element (e.g. file or directory) from the search; note that, to exclude a local 'foobar' directory, './foobar' must be specified (not just 'foobar'); as many --exclude options as wanted can be listed

  Example: $(basename $0) --exclude ./foo.dat --exclude ./backup-dir -i 'little red rooster' '*.txt'"


find="$(which find 2>/dev/null)"
grep="$(which grep 2>/dev/null)"

#echo "grep = ${grep}"
#echo "find = ${find}"


if [ ! -x "${grep}" ]; then
	echo "  Error, no executable 'grep' found." 1>&2
	exit 5
fi


if [ ! -x "${find}" ]; then
	echo   "Error, no executable 'find' found." 1>&2
	exit 6
fi


# Both are false by default:
verbose=1
quiet=1

insensitive_opt=""
restructured_mode=1
filenames_only=1


# A useless file to ensure grep always has multiple files to scan.
# Done to force grep to display the filename (otherwise it will not)
# No need to create it, however.
#
# Now disabled, as the grep '--with-filename' option does it better (not
# triggering an error)
#
#force_multi_files="${HOME}/.$(basename $0).to-delete.tmp"

name_opt="-name"

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then

	echo "${usage}"
	exit 0

fi

if [ $# -eq 0 ]; then
	echo "Error, too few parameters.
${usage}" 1>&2
	exit 1
fi


# Not relevant anymore, as we can chain many --exclude options:
#if [ $# -ge 7 ]; then
#   echo "Error, too many parameters ($*).
#${usage}" 1>&2
#   exit 2
#fi



# Read all known options:

token_eaten=0

while [ $token_eaten -eq 0 ]; do

	read_parameter="$1"
	#echo "read_parameter = ${read_parameter}"

	token_eaten=1

	if [ "${read_parameter}" = "--verbose" ] || [ "${read_parameter}" = "-v" ]; then
		verbose=0
		quiet=1
		echo "Verbose mode activated."
		token_eaten=0
	fi


	if [ "${read_parameter}" = "--quiet" ] || [ "${read_parameter}" = "-q" ]; then
		verbose=1
		quiet=0
		#echo "Quiet mode activated."
		token_eaten=0
	fi

	if [ "${read_parameter}" = "--filenames-only" ] || [ "${read_parameter}" = "-f" ]; then
		verbose=1
		quiet=0
		filenames_only=0
		[ $quiet -eq 0 ] || echo "Only filenames will be written, not found patterns."
		token_eaten=0
	fi


	if [ "${read_parameter}" = "--insensitive" ] || [ "${read_parameter}" = "-i" ]; then
		insensitive_opt="-i"
		name_opt="-iname"
		[ $quiet -eq 0 ] || echo "Case-insensitive mode activated."
		token_eaten=0
	fi


	if [ "${read_parameter}" = "--restructured" ] || [ "${read_parameter}" = "-r" ]; then
		restructured_mode=0
		#[ $quiet -eq 0 ] || echo "ReStructured text mode activated."
		token_eaten=0
	fi


	if [ "${read_parameter}" = "--exclude" ]; then
		shift
		to_exclude="$1"
		[ $quiet -eq 0 ] || echo "Excluding '${to_exclude}'."

		# Not a proper way: excludes="${excludes} --and ! -name '${to_exclude}'"

		# As between exclude clauses, a (single) '-o' must exist:

		# (note that we do *not* protect ${to_exclude} with single quotes,
		# otherwise find will receive, instead of './foobar',
		# ''\''./foobar'\'''; just use 'set -x' beforehand to check!)
		#
		excludes="${excludes} -path ${to_exclude} -prune -o"
		token_eaten=0
	fi


	if [ -n "${read_parameter}" ]; then
		shift
	fi

done


# Then check one or two parameters remain indeed:

if [ -z "${read_parameter}" ]; then
	echo "Error, too few parameters.
${usage}" 1>&2
	exit 3
fi


if [ $# -ge 2 ]; then
	echo "Error, too many parameters ($*).
${usage}" 1>&2
	exit 4
fi

#echo "excludes=${excludes}"


# To focus on (regular) files:
base_find_opt="-type f"

base_grep_opt="--color --with-filename"

searched_expression="${read_parameter}"
#echo "searched_expression = ${searched_expression}"

filter_on_file="$1"
#echo "filter_on_file = ${filter_on_file"


if [ $verbose -eq 0 ]; then

	echo "Will search in following files:"
	"${find}" . ${base_find_opt} -exec /bin/ls '{}'  ';' 2>/dev/null

fi


if [ -z "${filter_on_file}" ]; then

	# No filter specified:

	if [ $restructured_mode -eq 1 ]; then

		# Not RST-specific here:

		[ $quiet -eq 0 ] || echo "
	Recursive grep for expression <${searched_expression}> in all (non-excluded) files:
	"

		if [ $filenames_only -eq 1 ]; then

			#echo "(most common case; patterns wanted)"

			#echo "${find}" . ${excludes} ${base_find_opt} -a -exec "${grep}" ${base_grep_opt} ${insensitive_opt} "${searched_expression}" '{}' ';'

			"${find}" . ${excludes} ${base_find_opt} -a -exec "${grep}" ${base_grep_opt} ${insensitive_opt} "${searched_expression}" '{}' ';'

			exit

		else

			# Found patterns not wanted here:
			"${find}" . ${excludes} ${base_find_opt} -a -exec "${grep}" ${base_grep_opt} ${insensitive_opt} "${searched_expression}" '{}' ';' | sed 's|:.*$||1' | uniq

		fi

	else

		# RST-specific:

		[ $quiet -eq 0 ] || echo "
	Recursive grep for expression <${searched_expression}> in all RST-related (non-excluded) files:
	"

		# No filter specified, using '*.rst' and '*.rst.template':
		"${find}" . ${excludes} ${base_find_opt} -name tmp-rst -prune -o \( ${name_opt} '*.rst' -o ${name_opt} '*.rst.template' \) -exec "${grep}" ${base_grep_opt} ${insensitive_opt} "${searched_expression}" '{}' ';' 2>/dev/null

	fi

else

	if [ $restructured_mode -eq 1 ]; then

		[ $quiet -eq 0 ] || echo "
	Recursive grep for expression <${searched_expression}> in all files matching <${filter_on_file}>:
	"

		if [ $filenames_only -eq 1 ]; then

			"${find}" . ${excludes} ${base_find_opt} ${name_opt} "${filter_on_file}" -exec "${grep}" ${base_grep_opt} ${insensitive_opt} "${searched_expression}" '{}' ';' 2>/dev/null

		else

			"${find}" . ${excludes} ${base_find_opt} ${name_opt} "${filter_on_file}" -exec "${grep}" ${base_grep_opt} ${insensitive_opt} "${searched_expression}" '{}' ';' 2>/dev/null | sed 's|:.*$||1' | uniq

		fi

	else

		[ $quiet -eq 0 ] || echo "
	Recursive grep for expression <${searched_expression}> in all RST-related files matching <${filter_on_file}>:
	"

		if [ $filenames_only -eq 1 ]; then

			"${find}" . ${excludes} ${base_find_opt} -name tmp-rst -prune -o ${name_opt} "${filter_on_file}" -exec "${grep}" ${base_grep_opt} ${insensitive_opt} "${searched_expression}" '{}' ';' 2>/dev/null

		else

			"${find}" . ${excludes} ${base_find_opt} -name tmp-rst -prune -o ${name_opt} "${filter_on_file}" -exec "${grep}" ${base_grep_opt} ${insensitive_opt} "${searched_expression}" '{}' ';' 2>/dev/null | sed 's|:.*$||1' | uniq

		fi

   fi

fi


[ $quiet -eq 0 ] || echo "
End of search."
