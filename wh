#!/bin/sh

usage="Usage: $(basename $0) [-h|--help] [-v|--verbose] [-q|--quiet] [-i|--case-insensitive] [--no-path] [-e|--exclude ELEM]* FILE_ELEM_PATTERN [STARTING_DIR]

This '$(basename $0)' (for \"where\") script searches (as a more user-friendly 'find') all files and directories matching FILE_ELEM_PATTERN (e.g. '*hello*.?rl'), from STARTING_DIR if specified, otherwise from the current directory.

Options:
	-v or --verbose: be specifically verbose
	-q or --quiet: return only file entries (no extra user-oriented information); suitable for scripts (for example: 'for f in \$($(basename $0) -q 'foo*'); do...')
	-i or --case-insensitive: perform a case-insensitive search (excludes are still case-sensitive)
	-e or --exclude ELEM: exclude the specified filesystem element (e.g. file or directory) from the search; as many -e/--exclude options as wanted can be specified
	--no-path: return the filenames without any leading path
	-h or --help: display this help

  Example: $(basename $0) --exclude ./foo.dat --exclude backup-dir -i '*.backup.?'"


find_gnu="/usr/bin/find"

# Follow symbolic links:
find_opt="-L"

verbose=1
quiet=1
no_path=1

case_insensitive=1

excludes=""

#prefix="-->"
prefix=" "

multi_excludes=1

token_eaten=0

while [ $token_eaten -eq 0 ]; do

	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then

		echo "${usage}"
		exit 0

	elif [ "$1" = "-v" ] || [ "$1" = "--verbose" ]; then

		verbose=0
		echo "Verbose mode activated."
		shift

	elif [ "$1" = "-q" ] || [ "$1" = "--quiet" ]; then

		quiet=0
		#echo "Quiet mode activated."
		shift

	elif [ "$1" = "-i" ] || [ "$1" = "--case-insensitive" ]; then

		case_insensitive=0
		#echo "Case-insensitive mode activated."
		case_comment="(case-insensitively) "
		shift

	elif [ "$1" = "--no-path" ]; then

		no_path=0
		[ $quiet -eq 0 ] || echo "Only filenames without paths will be output."
		shift

	elif [ "$1" = "-e" ] || [ "$1" = "--exclude" ]; then

		shift
		to_exclude="$1"

		case "${to_exclude}" in

			./*)
				;;

			*)
				to_exclude_fixed="./${to_exclude}"
				#echo "Warning: beginning of excluded path '${to_exclude}' auto-fixed to '${to_exclude_fixed}'."
				to_exclude="${to_exclude_fixed}"
				;;

		esac

		# To avoid "warning: -path ./foobar/ will not match anything because it
		# ends with /.":

		# Or: last_char="$(echo "${to_exclude}" | sed -E 's|.*(.)|\1|')"

		last_char="$(echo -n ${to_exclude} | tail -c 1)"

		if [ ${last_char} = "/" ]; then
			# Chop that last character:
			to_exclude_fixed="$(echo ${to_exclude} | sed 's|.$||')"
			#echo "Warning: ending of excluded path '${to_exclude}' auto-fixed to '${to_exclude_fixed}'."
			to_exclude="${to_exclude_fixed}"
		fi

		[ $quiet -eq 0 ] || echo "Excluding '${to_exclude}'."

		# Improper ways:
		#  excludes="${excludes} --and ! -name '${to_exclude}'"
		#  excludes="${excludes} (-name ${to_exclude} -prune -o -type f) -a "

		# As between exclude clauses, a (single) '-o' must exist:

		# (note that we do *not* protect ${to_exclude} with single quotes,
		# otherwise find will receive, instead of './foobar',
		# ''\''./foobar'\'''; just use 'set -x' beforehand to check!)
		#
		# Intersped with -o:
		if [ -z "${excludes}" ]; then
			excludes="-path ${to_exclude}"
		else
			multi_excludes=0
			excludes="${excludes} -o -path ${to_exclude}"
		fi

		shift

	else

		token_eaten=1

	fi

done

# Here in $1 $2 etc. are the unrecognized commands.

#echo "Remaining parameters: $*"


if [ $# -eq 0 ]; then

	echo "  Error, at least one parameter must be specified.
${usage}" 1>&2
	exit 10

elif [ $# -eq 1 ]; then

	starting_dir="$(pwd)"

elif [ $# -eq 2 ]; then

	starting_dir="$2"

else

	echo "  Error, too many parameters specified: $*.
${usage}" 1>&2
	exit 15

fi


#echo "excludes=${excludes}"

if [ -n "${excludes}" ]; then

	if [ $multi_excludes -eq 0 ]; then
		excludes="( ${excludes} ) -prune -o "
	else
		excludes="${excludes} -prune -o "
	fi

fi


if [ ! -d "${starting_dir}" ]; then

	echo " Error, no such directory: '${starting_dir}'.
${usage}" 1>&2
	exit 20

else

	cd "${starting_dir}"

fi


if [ -x "${find_gnu}" ]; then
	find="${find_gnu}"
else
	find="$(which find 2>/dev/null | grep -v ridiculously)"
fi

[ $verbose -eq 1 ] || echo "find is ${find}"


target_pattern="$1"

[ $quiet -eq 0 ] || echo "
${prefix} Looking ${case_comment}for all files and directories matching <${target_pattern}>, starting from directory '${starting_dir}':
"


if [ $case_insensitive -eq 0 ]; then

	name_opt="-iname"

else

	name_opt="-name"

fi

[ $verbose -eq 1 ] || echo "Current directory is: $(pwd)"


# For an unknown reason, 'cd XXX; find . YYY' seems to work better than
# 'find XXX YYY'.

if [ $no_path -eq 0 ]; then

	[ $verbose -eq 1 ] || echo "No path case, run from $(pwd): command is: ${find} ${find_opt} . ${excludes} ${name_opt} \"${target_pattern}\" -exec basename '{}' ';' #2>/dev/null"

	${find} ${find_opt} . ${excludes} ${name_opt} "${target_pattern}" -exec basename '{}' ';' 2>/dev/null

else

	[ $verbose -eq 1 ] || echo "With path case, run from $(pwd): command is: ${find} . ${excludes} ${name_opt} \"${target_pattern}\" -print #2>/dev/null | more"

	${find} ${find_opt} . ${excludes} ${name_opt} "${target_pattern}" -print 2>/dev/null # | more

fi

[ $quiet -eq 0 ] || echo "
${prefix} End of search"
