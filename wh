#!/bin/sh

usage="Usage: $(basename $0) [-h|--help] [-v|--verbose] [-q|--quiet] [-i|--case-insensitive] [--no-path] [--exclude-path SOME_DIR] FILE_PATTERN [STARTING_DIR]

This '$(basename $0)' (for \"where\") script searches (as a more user-friendly 'find') all files and directories matching FILE_PATTERN (ex: '*hello*.?rl'), from STARTING_DIR if specified, otherwise from the current directory.

Options:
	-q or --quiet: returns only file entries (no extra user-oriented information); suitable for scripts (ex: for f in \$($(basename $0) -q 'foo*'); do...)
	-i or --case-insensitive: performs a case-insensitive search (excludes are still case-sensitive)
	--no-path: returns the filenames without any leading path
	--exclude-path SOME_DIR: excludes specified the directory SOME_DIR from search
	-v or --verbose: outputs more information
	-h or --help: displays this help"

find_gnu="/usr/bin/find"

# Follow symbolic links:
find_opt="-L"

verbose=1
quiet=1
no_path=1

case_insensitive=1

exclude_command=""

#prefix="-->"
prefix=" "

token_eaten=0

while [ $token_eaten -eq 0 ]; do

	if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then

		echo "${usage}"
		exit 0

	elif [ "$1" = "-v" ] || [ "$1" = "--verbose" ]; then

		verbose=0
		echo "Verbose mode activated."
		shift

	elif [ "$1" = "-q" ] || [ "$1" = "--quiet" ]; then

		quiet=0
		#echo "Quiet mode activated."
		shift

	elif [ "$1" = "-i" ] || [ "$1" = "--case-insensitive" ]; then

		case_insensitive=0
		#echo "Case-insensitive mode activated."
		case_comment="(case-insensitively) "
		shift

	elif [ "$1" = "--no-path" ]; then

		no_path=0
		[ $quiet -eq 0 ] || echo "Only filenames without paths will be output."
		shift

	elif [ "$1" = "--exclude-path" ]; then

		to_exclude="$2"
		exclude_command="${exclude_command} (-name ${to_exclude} -prune -o -type f) -a "
		[ $quiet -eq 0 ] || echo "  Directory '${to_exclude}' to be excluded."
		#echo "exclude_command = ${exclude_command}"

		shift
		shift

	else

		token_eaten=1

	fi

done

# Here in $1 $2 etc. are the unrecognized commands.

#echo "Remaining parameters: $*"


if [ $# -eq 0 ]; then

	echo "  Error, at least one parameter must be specified.
${usage}" 1>&2
	exit 10

elif [ $# -eq 1 ]; then

	starting_dir="$(pwd)"

elif [ $# -eq 2 ]; then

	starting_dir="$2"

else

	echo "  Error, too many parameters specified: $*.
${usage}" 1>&2
	exit 15

fi


if [ ! -d "${starting_dir}" ]; then

	echo " Error, no such directory: '${starting_dir}'.
${usage}" 1>&2
	exit 20

else

	cd "${starting_dir}"

fi


if [ -x "${find_gnu}" ]; then
	find="${find_gnu}"
else
	find="$(which find 2>/dev/null | grep -v ridiculously)"
fi

[ $verbose -eq 1 ] || echo "find is ${find}"


target_pattern="$1"

[ $quiet -eq 0 ] || echo "
${prefix} Looking ${case_comment}for all files and directories matching <${target_pattern}>, starting from directory '${starting_dir}':
"


if [ $case_insensitive -eq 0 ]; then

	name_opt="-iname"

else

	name_opt="-name"

fi

[ $verbose -eq 1 ] || echo "Current directory is: $(pwd)"


# For an unknown reason, 'cd XXX; find . YYY' seems to work better than
# 'find XXX YYY'.

if [ $no_path -eq 0 ]; then

	[ $verbose -eq 1 ] || echo "No path case, run from $(pwd): command is: ${find} ${find_opt} . ${exclude_command} ${name_opt} \"${target_pattern}\" -exec basename '{}' ';' #2>/dev/null"

	${find} ${find_opt} . ${exclude_command} ${name_opt} "${target_pattern}" -exec basename '{}' ';' 2>/dev/null

else

	[ $verbose -eq 1 ] || echo "With path case, run from $(pwd): command is: ${find} . ${exclude_command} ${name_opt} \"${target_pattern}\" -print #2>/dev/null | more"

	${find} ${find_opt} . ${exclude_command} ${name_opt} "${target_pattern}" -print 2>/dev/null | more

fi

[ $quiet -eq 0 ] || echo "
${prefix} End of search"
